services:
  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--entrypoints.web.address=:80"
      - "--ping=true"
      - "--ping.entrypoint=web"
      # Configuración de timeouts
      - "--serversTransport.forwardingTimeouts.dialTimeout=30s"
      - "--serversTransport.forwardingTimeouts.responseHeaderTimeout=30s"
      - "--serversTransport.forwardingTimeouts.idleConnTimeout=90s"
    ports:
      - "80:80"
      - "8080:8080" # Dashboard solo accesible localmente
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - rabbitmq-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`localhost`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.middlewares.dashboard-strip.stripprefix.prefixes=/dashboard"
      - "traefik.http.routers.dashboard.middlewares=dashboard-strip"
      - "traefik.http.routers.dashboard.entrypoints=web"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "15672:15672" # Puerto para la interfaz de gestión
      - "5672:5672"   # Puerto AMQP
      - "15674:15674" # Puerto para WebSTOMP
    volumes:
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rabbitmq-network

  postgres:
    build: ./Postgres
    container_name: smart-search-db
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - rabbitmq-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    labels:
      - "traefik.enable=false"

  front:
    build: ./front
    ports:
      - "5173:5173"
    volumes:
      - ./front:/app
      - /app/node_modules
    networks:
      - rabbitmq-network
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - NODE_ENV=development
      - VITE_DEV_SERVER_HOST=0.0.0.0
      - VITE_DEV_SERVER_PORT=5173
      - CHOKIDAR_USEPOLLING=true
    labels:
      - "traefik.enable=false"

  back:
    build: ./back
    networks:
      - rabbitmq-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - PYTHONUNBUFFERED=1
    restart: always
    labels:
      - "traefik.enable=false"

  ai_service:
    build: ./ai_service
    container_name: smart-search-ai-service
    ports:
      - "5001:5001" # Puerto para el servicio de IA
    networks:
      - rabbitmq-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5001/ || exit 1"] # Ruta de healthcheck simple, ajustar si es necesario
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s # Dar tiempo a que Flask inicie
    labels:
      - "traefik.enable=false"

networks:
  rabbitmq-network:
    driver: bridge

volumes:
  postgres-data:
